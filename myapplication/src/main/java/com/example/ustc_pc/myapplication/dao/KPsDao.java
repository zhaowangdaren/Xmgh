package com.example.ustc_pc.myapplication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KPS".
*/
public class KPsDao extends AbstractDao<KPs, Long> {

    public static final String TABLENAME = "KPS";

    /**
     * Properties of entity KPs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IUserID = new Property(1, Integer.class, "iUserID", false, "I_USER_ID");
        public final static Property IsExpand = new Property(2, Boolean.class, "isExpand", false, "IS_EXPAND");
        public final static Property StrKPID = new Property(3, String.class, "strKPID", false, "STR_KPID");
        public final static Property ICourseID = new Property(4, Integer.class, "iCourseID", false, "I_COURSE_ID");
        public final static Property StrName = new Property(5, String.class, "strName", false, "STR_NAME");
        public final static Property ILevel = new Property(6, Integer.class, "iLevel", false, "I_LEVEL");
        public final static Property StrFatherKPID = new Property(7, String.class, "strFatherKPID", false, "STR_FATHER_KPID");
        public final static Property HasChild = new Property(8, Boolean.class, "hasChild", false, "HAS_CHILD");
        public final static Property IProgress = new Property(9, Integer.class, "iProgress", false, "I_PROGRESS");
    };


    public KPsDao(DaoConfig config) {
        super(config);
    }
    
    public KPsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"I_USER_ID\" INTEGER," + // 1: iUserID
                "\"IS_EXPAND\" INTEGER," + // 2: isExpand
                "\"STR_KPID\" TEXT," + // 3: strKPID
                "\"I_COURSE_ID\" INTEGER," + // 4: iCourseID
                "\"STR_NAME\" TEXT," + // 5: strName
                "\"I_LEVEL\" INTEGER," + // 6: iLevel
                "\"STR_FATHER_KPID\" TEXT," + // 7: strFatherKPID
                "\"HAS_CHILD\" INTEGER," + // 8: hasChild
                "\"I_PROGRESS\" INTEGER);"); // 9: iProgress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KPS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KPs entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer iUserID = entity.getIUserID();
        if (iUserID != null) {
            stmt.bindLong(2, iUserID);
        }
 
        Boolean isExpand = entity.getIsExpand();
        if (isExpand != null) {
            stmt.bindLong(3, isExpand ? 1L: 0L);
        }
 
        String strKPID = entity.getStrKPID();
        if (strKPID != null) {
            stmt.bindString(4, strKPID);
        }
 
        Integer iCourseID = entity.getICourseID();
        if (iCourseID != null) {
            stmt.bindLong(5, iCourseID);
        }
 
        String strName = entity.getStrName();
        if (strName != null) {
            stmt.bindString(6, strName);
        }
 
        Integer iLevel = entity.getILevel();
        if (iLevel != null) {
            stmt.bindLong(7, iLevel);
        }
 
        String strFatherKPID = entity.getStrFatherKPID();
        if (strFatherKPID != null) {
            stmt.bindString(8, strFatherKPID);
        }
 
        Boolean hasChild = entity.getHasChild();
        if (hasChild != null) {
            stmt.bindLong(9, hasChild ? 1L: 0L);
        }
 
        Integer iProgress = entity.getIProgress();
        if (iProgress != null) {
            stmt.bindLong(10, iProgress);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KPs readEntity(Cursor cursor, int offset) {
        KPs entity = new KPs( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // iUserID
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isExpand
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // strKPID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // iCourseID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // iLevel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strFatherKPID
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // hasChild
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // iProgress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KPs entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIUserID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsExpand(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setStrKPID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setICourseID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStrName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setILevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStrFatherKPID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasChild(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIProgress(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KPs entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(KPs entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
