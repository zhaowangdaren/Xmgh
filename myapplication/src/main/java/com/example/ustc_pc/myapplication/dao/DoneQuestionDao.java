package com.example.ustc_pc.myapplication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DONE_QUESTION".
*/
public class DoneQuestionDao extends AbstractDao<DoneQuestion, Long> {

    public static final String TABLENAME = "DONE_QUESTION";

    /**
     * Properties of entity DoneQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ICourseID = new Property(0, Integer.class, "iCourseID", false, "I_COURSE_ID");
        public final static Property IQuestionType = new Property(1, Integer.class, "iQuestionType", false, "I_QUESTION_TYPE");
        public final static Property LQuestionID = new Property(2, Long.class, "lQuestionID", true, "L_QUESTION_ID");
        public final static Property IsFavorite = new Property(3, Boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property IsCorrect = new Property(4, Boolean.class, "isCorrect", false, "IS_CORRECT");
        public final static Property StrNote = new Property(5, String.class, "strNote", false, "STR_NOTE");
        public final static Property StrUserAnswer = new Property(6, String.class, "strUserAnswer", false, "STR_USER_ANSWER");
        public final static Property LSpendTime = new Property(7, Long.class, "lSpendTime", false, "L_SPEND_TIME");
        public final static Property StrQuestionKpID = new Property(8, String.class, "strQuestionKpID", false, "STR_QUESTION_KP_ID");
        public final static Property ITestID = new Property(9, Integer.class, "iTestID", false, "I_TEST_ID");
    };


    public DoneQuestionDao(DaoConfig config) {
        super(config);
    }
    
    public DoneQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DONE_QUESTION\" (" + //
                "\"I_COURSE_ID\" INTEGER," + // 0: iCourseID
                "\"I_QUESTION_TYPE\" INTEGER," + // 1: iQuestionType
                "\"L_QUESTION_ID\" INTEGER PRIMARY KEY ASC ," + // 2: lQuestionID
                "\"IS_FAVORITE\" INTEGER," + // 3: isFavorite
                "\"IS_CORRECT\" INTEGER," + // 4: isCorrect
                "\"STR_NOTE\" TEXT," + // 5: strNote
                "\"STR_USER_ANSWER\" TEXT," + // 6: strUserAnswer
                "\"L_SPEND_TIME\" INTEGER," + // 7: lSpendTime
                "\"STR_QUESTION_KP_ID\" TEXT," + // 8: strQuestionKpID
                "\"I_TEST_ID\" INTEGER);"); // 9: iTestID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DONE_QUESTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DoneQuestion entity) {
        stmt.clearBindings();
 
        Integer iCourseID = entity.getICourseID();
        if (iCourseID != null) {
            stmt.bindLong(1, iCourseID);
        }
 
        Integer iQuestionType = entity.getIQuestionType();
        if (iQuestionType != null) {
            stmt.bindLong(2, iQuestionType);
        }
 
        Long lQuestionID = entity.getLQuestionID();
        if (lQuestionID != null) {
            stmt.bindLong(3, lQuestionID);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(4, isFavorite ? 1L: 0L);
        }
 
        Boolean isCorrect = entity.getIsCorrect();
        if (isCorrect != null) {
            stmt.bindLong(5, isCorrect ? 1L: 0L);
        }
 
        String strNote = entity.getStrNote();
        if (strNote != null) {
            stmt.bindString(6, strNote);
        }
 
        String strUserAnswer = entity.getStrUserAnswer();
        if (strUserAnswer != null) {
            stmt.bindString(7, strUserAnswer);
        }
 
        Long lSpendTime = entity.getLSpendTime();
        if (lSpendTime != null) {
            stmt.bindLong(8, lSpendTime);
        }
 
        String strQuestionKpID = entity.getStrQuestionKpID();
        if (strQuestionKpID != null) {
            stmt.bindString(9, strQuestionKpID);
        }
 
        Integer iTestID = entity.getITestID();
        if (iTestID != null) {
            stmt.bindLong(10, iTestID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public DoneQuestion readEntity(Cursor cursor, int offset) {
        DoneQuestion entity = new DoneQuestion( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // iCourseID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // iQuestionType
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // lQuestionID
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isFavorite
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isCorrect
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strNote
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strUserAnswer
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // lSpendTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // strQuestionKpID
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // iTestID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DoneQuestion entity, int offset) {
        entity.setICourseID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setIQuestionType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLQuestionID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIsFavorite(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsCorrect(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setStrNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrUserAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLSpendTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setStrQuestionKpID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setITestID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DoneQuestion entity, long rowId) {
        entity.setLQuestionID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DoneQuestion entity) {
        if(entity != null) {
            return entity.getLQuestionID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
