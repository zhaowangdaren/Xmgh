package com.example.ustc_pc.myapplication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StrCourseName = new Property(1, String.class, "strCourseName", false, "STR_COURSE_NAME");
        public final static Property ICourseID = new Property(2, Integer.class, "iCourseID", false, "I_COURSE_ID");
        public final static Property IsSelected = new Property(3, Boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property IUserID = new Property(4, Integer.class, "iUserID", false, "I_USER_ID");
    };


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STR_COURSE_NAME\" TEXT," + // 1: strCourseName
                "\"I_COURSE_ID\" INTEGER," + // 2: iCourseID
                "\"IS_SELECTED\" INTEGER," + // 3: isSelected
                "\"I_USER_ID\" INTEGER);"); // 4: iUserID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String strCourseName = entity.getStrCourseName();
        if (strCourseName != null) {
            stmt.bindString(2, strCourseName);
        }
 
        Integer iCourseID = entity.getICourseID();
        if (iCourseID != null) {
            stmt.bindLong(3, iCourseID);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(4, isSelected ? 1L: 0L);
        }
 
        Integer iUserID = entity.getIUserID();
        if (iUserID != null) {
            stmt.bindLong(5, iUserID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // strCourseName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // iCourseID
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isSelected
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // iUserID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStrCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setICourseID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIsSelected(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIUserID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
