package com.example.ustc_pc.myapplication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IUserID = new Property(1, Integer.class, "iUserID", false, "I_USER_ID");
        public final static Property StrPhoneNumber = new Property(2, String.class, "strPhoneNumber", false, "STR_PHONE_NUMBER");
        public final static Property StrUserName = new Property(3, String.class, "strUserName", false, "STR_USER_NAME");
        public final static Property IGender = new Property(4, Integer.class, "iGender", false, "I_GENDER");
        public final static Property StrEmail = new Property(5, String.class, "strEmail", false, "STR_EMAIL");
        public final static Property StrAboutMe = new Property(6, String.class, "strAboutMe", false, "STR_ABOUT_ME");
        public final static Property IUserType = new Property(7, Integer.class, "iUserType", false, "I_USER_TYPE");
        public final static Property StrSourceCollege = new Property(8, String.class, "strSourceCollege", false, "STR_SOURCE_COLLEGE");
        public final static Property StrSourceMajor = new Property(9, String.class, "strSourceMajor", false, "STR_SOURCE_MAJOR");
        public final static Property StrFirstTargetCollege = new Property(10, String.class, "strFirstTargetCollege", false, "STR_FIRST_TARGET_COLLEGE");
        public final static Property StrFirstTargetMajor = new Property(11, String.class, "strFirstTargetMajor", false, "STR_FIRST_TARGET_MAJOR");
        public final static Property StrSecondTargetCollege = new Property(12, String.class, "strSecondTargetCollege", false, "STR_SECOND_TARGET_COLLEGE");
        public final static Property StrSecondTargetMajor = new Property(13, String.class, "strSecondTargetMajor", false, "STR_SECOND_TARGET_MAJOR");
        public final static Property StrAcceptedCollege = new Property(14, String.class, "strAcceptedCollege", false, "STR_ACCEPTED_COLLEGE");
        public final static Property StrAcceptedMajor = new Property(15, String.class, "strAcceptedMajor", false, "STR_ACCEPTED_MAJOR");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"I_USER_ID\" INTEGER," + // 1: iUserID
                "\"STR_PHONE_NUMBER\" TEXT," + // 2: strPhoneNumber
                "\"STR_USER_NAME\" TEXT," + // 3: strUserName
                "\"I_GENDER\" INTEGER," + // 4: iGender
                "\"STR_EMAIL\" TEXT," + // 5: strEmail
                "\"STR_ABOUT_ME\" TEXT," + // 6: strAboutMe
                "\"I_USER_TYPE\" INTEGER," + // 7: iUserType
                "\"STR_SOURCE_COLLEGE\" TEXT," + // 8: strSourceCollege
                "\"STR_SOURCE_MAJOR\" TEXT," + // 9: strSourceMajor
                "\"STR_FIRST_TARGET_COLLEGE\" TEXT," + // 10: strFirstTargetCollege
                "\"STR_FIRST_TARGET_MAJOR\" TEXT," + // 11: strFirstTargetMajor
                "\"STR_SECOND_TARGET_COLLEGE\" TEXT," + // 12: strSecondTargetCollege
                "\"STR_SECOND_TARGET_MAJOR\" TEXT," + // 13: strSecondTargetMajor
                "\"STR_ACCEPTED_COLLEGE\" TEXT," + // 14: strAcceptedCollege
                "\"STR_ACCEPTED_MAJOR\" TEXT);"); // 15: strAcceptedMajor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer iUserID = entity.getIUserID();
        if (iUserID != null) {
            stmt.bindLong(2, iUserID);
        }
 
        String strPhoneNumber = entity.getStrPhoneNumber();
        if (strPhoneNumber != null) {
            stmt.bindString(3, strPhoneNumber);
        }
 
        String strUserName = entity.getStrUserName();
        if (strUserName != null) {
            stmt.bindString(4, strUserName);
        }
 
        Integer iGender = entity.getIGender();
        if (iGender != null) {
            stmt.bindLong(5, iGender);
        }
 
        String strEmail = entity.getStrEmail();
        if (strEmail != null) {
            stmt.bindString(6, strEmail);
        }
 
        String strAboutMe = entity.getStrAboutMe();
        if (strAboutMe != null) {
            stmt.bindString(7, strAboutMe);
        }
 
        Integer iUserType = entity.getIUserType();
        if (iUserType != null) {
            stmt.bindLong(8, iUserType);
        }
 
        String strSourceCollege = entity.getStrSourceCollege();
        if (strSourceCollege != null) {
            stmt.bindString(9, strSourceCollege);
        }
 
        String strSourceMajor = entity.getStrSourceMajor();
        if (strSourceMajor != null) {
            stmt.bindString(10, strSourceMajor);
        }
 
        String strFirstTargetCollege = entity.getStrFirstTargetCollege();
        if (strFirstTargetCollege != null) {
            stmt.bindString(11, strFirstTargetCollege);
        }
 
        String strFirstTargetMajor = entity.getStrFirstTargetMajor();
        if (strFirstTargetMajor != null) {
            stmt.bindString(12, strFirstTargetMajor);
        }
 
        String strSecondTargetCollege = entity.getStrSecondTargetCollege();
        if (strSecondTargetCollege != null) {
            stmt.bindString(13, strSecondTargetCollege);
        }
 
        String strSecondTargetMajor = entity.getStrSecondTargetMajor();
        if (strSecondTargetMajor != null) {
            stmt.bindString(14, strSecondTargetMajor);
        }
 
        String strAcceptedCollege = entity.getStrAcceptedCollege();
        if (strAcceptedCollege != null) {
            stmt.bindString(15, strAcceptedCollege);
        }
 
        String strAcceptedMajor = entity.getStrAcceptedMajor();
        if (strAcceptedMajor != null) {
            stmt.bindString(16, strAcceptedMajor);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // iUserID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // strPhoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // strUserName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // iGender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strEmail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strAboutMe
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // iUserType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // strSourceCollege
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // strSourceMajor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // strFirstTargetCollege
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // strFirstTargetMajor
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // strSecondTargetCollege
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // strSecondTargetMajor
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // strAcceptedCollege
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // strAcceptedMajor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIUserID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStrPhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStrUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIGender(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStrEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStrAboutMe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIUserType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setStrSourceCollege(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStrSourceMajor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStrFirstTargetCollege(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStrFirstTargetMajor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStrSecondTargetCollege(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStrSecondTargetMajor(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStrAcceptedCollege(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStrAcceptedMajor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
